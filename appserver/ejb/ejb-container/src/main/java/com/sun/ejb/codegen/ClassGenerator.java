/*
 * Copyright (c) 2022 Eclipse Foundation and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

package com.sun.ejb.codegen;

import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.security.AccessController;
import java.security.PrivilegedExceptionAction;
import java.security.ProtectionDomain;
import java.util.logging.Logger;

import static java.util.logging.Level.CONFIG;

/**
 * This class serves to generate classes, which cannot be generated by the
 * {@link java.lang.invoke.MethodHandles.Lookup} class, because it restricts
 * the generated class to use an already existing class as a source of the package
 * and {@link ProtectionDomain}.
 * <p>
 * Also {@link Proxy#newProxyInstance(ClassLoader, Class[], java.lang.reflect.InvocationHandler)}
 * has another requirements, ie. all referred classes must be loadable by used classloader.
 *
 * @author David Matejcek
 */
public final class ClassGenerator {

    private static final Logger LOG = Logger.getLogger(ClassGenerator.class.getName());
    private static Method defineClassMethod;
    private static Method defineClassMethodSM;

    static {
        try {
            final PrivilegedExceptionAction<Void> action = () -> {
                final Class<?> cl = Class.forName("java.lang.ClassLoader");
                final String name = "defineClass";
                defineClassMethod = cl.getDeclaredMethod(name, String.class, byte[].class, int.class, int.class);
                defineClassMethod.setAccessible(true);
                defineClassMethodSM = cl.getDeclaredMethod(
                    name, String.class, byte[].class, int.class, int.class, ProtectionDomain.class);
                defineClassMethodSM.setAccessible(true);
                return null;
            };
            AccessController.doPrivileged(action);
            LOG.config("ClassLoader methods capable of generating classes were successfully detected.");
        } catch (final Exception e) {
            throw new Error("Could not initialize access to ClassLoader.defineClass method.", e);
        }
    }


    private ClassGenerator() {
        // hidden
    }


    /**
     * Calls the {@link ClassLoader}'s protected defineClass method to create a new class
     *
     * @param loader the classloader instance used to generate the class
     * @param className expected binary name or null
     * @param classData the valid bytes that make up the class data.
     * @return the new generated class
     * @throws ClassDefinitionException invalid data, missing dependency, or another error related
     *             to the class generation
     */
    public static Class<?> defineClass(final ClassLoader loader, final String className, final byte[] classData)
        throws ClassDefinitionException {
        return defineClass(loader, className, classData, 0, classData.length);
    }


    /**
     * Calls the {@link ClassLoader}'s protected defineClass method to create a new class
     *
     * @param loader the classloader instance used to generate the class
     * @param className expected binary name or null
     * @param classData the valid bytes that make up the class data.
     * @param offset The start offset in {@code b} of the class data
     * @param length The length of the class data
     * @return the new generated class
     * @throws ClassDefinitionException invalid data, missing dependency, or another error related
     *             to the class generation
     */
    public static Class<?> defineClass(
        final ClassLoader loader, final String className,
        final byte[] classData, final int offset, final int length) throws ClassDefinitionException {
        LOG.log(CONFIG, "Defining class: {0} by loader: {1}", new Object[] {className, loader});
        try {
            return (Class<?>) defineClassMethod.invoke(loader, className, classData, 0, length);
        } catch (final Exception | NoClassDefFoundError | ClassFormatError e) {
            throw new ClassDefinitionException(className, loader, e);
        }
    }


    /**
     * Calls the {@link ClassLoader}'s protected defineClass method to create a new class
     *
     * @param loader the classloader instance used to generate the class
     * @param className expected binary name or null
     * @param classData the valid bytes that make up the class data.
     * @param protectionDomain The {@code ProtectionDomain} of the class
     * @return the new generated class
     * @throws ClassDefinitionException invalid data, missing dependency, or another error related
     *             to the class generation
     */
    public static Class<?> defineClass(final ClassLoader loader, final String className, final byte[] classData,
        final ProtectionDomain protectionDomain) throws ClassDefinitionException {
        return defineClass(loader, className, classData, 0, classData.length, protectionDomain);
    }


    /**
     * Calls the {@link ClassLoader}'s protected defineClass method to create a new class
     *
     * @param loader the classloader instance used to generate the class
     * @param className expected binary name or null
     * @param classData the valid bytes that make up the class data.
     * @param offset The start offset in {@code b} of the class data
     * @param length The length of the class data
     * @param protectionDomain The {@code ProtectionDomain} of the class
     * @return the new generated class
     * @throws ClassDefinitionException invalid data, missing dependency, or another error related
     *             to the class generation
     */
    public static Class<?> defineClass(
        final ClassLoader loader, final String className,
        final byte[] classData, final int offset, final int length,
        final ProtectionDomain protectionDomain) throws ClassDefinitionException {
        LOG.log(CONFIG, "Defining class: {0} by loader: {1}", new Object[] {className, loader});
        try {
            return (Class<?>) defineClassMethodSM.invoke(loader, className, classData, 0, length, protectionDomain);
        } catch (final Exception | NoClassDefFoundError | ClassFormatError e) {
            throw new ClassDefinitionException(className, loader, e);
        }
    }


    /**
     * The class wasn't generated. See the message and cause to see what happened.
     */
    public static class ClassDefinitionException extends RuntimeException {
        private static final long serialVersionUID = -8955780830818904365L;

        ClassDefinitionException(final String className, final ClassLoader loader, final Throwable cause) {
            super("Could not define class '" + className + "' by the class loader: " + loader, cause);
        }
    }
}
